{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,sBAAc,EAAC;AACX,gBAAI,EAAC,EAAE,CAAC,MAAM;AACd,uBAAQ,EAAE;SACb;KACJ;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,kBAAkB,EAAE,CAAC;;AAE1B,YAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AACtE,YAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;KAC7C;AACD,aAAS,EAAC,qBAAU;AAChB,YAAI,CAAC,WAAW,EAAG,CAAC;AACpB,YAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;KAC7C;AACD,gBAAY,EAAC,sBAAS,CAAC,EAAC;AACpB,YAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACtC,YAAG,KAAK,IAAI,CAAC,EAAC;AACV,gBAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;SAClC;KACJ;AACD,sBAAkB,EAAC,8BAAU;AACzB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5D,cAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;AAE5B,YAAG,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAC;AACpC,kBAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;SACvC;AACD,YAAI,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,YAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtB,aAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;AACxC,gBAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC;;AAED,SAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA,GAAI,GAAG,CAAC;AAClC,SAAC,CAAC,CAAC,GAAG,AAAC,IAAI,CAAC,MAAM,EAAE,GAAI,GAAG,GAAG,GAAG,CAAC;AAClC,YAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/E;;;;;CAKJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        groups_prefabs:{\r\n            type:cc.Prefab,\r\n            default:[],\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.enemy_set = [];\r\n        this._gen_random_groups();\r\n        \r\n        this.score_value = 0;\r\n        this.score = this.node.getChildByName(\"score\").getComponent(cc.Label);\r\n        this.score.string = \"\" + this.score_value;\r\n    },\r\n    add_score:function(){\r\n        this.score_value ++;\r\n        this.score.string = \"\" + this.score_value;\r\n    },\r\n    remove_enemy:function(e){\r\n        var index = this.enemy_set.indexOf(e);\r\n        if(index >= 0){\r\n            this.enemy_set.splice(index,1);\r\n        }\r\n    },\r\n    _gen_random_groups:function(){\r\n        var g_type = Math.random() * this.groups_prefabs.length + 1;\r\n        g_type = Math.floor(g_type);\r\n        \r\n        if(g_type >= this.groups_prefabs.length){\r\n            g_type = this.groups_prefabs.length;\r\n        }\r\n        var g = cc.instantiate(this.groups_prefabs[g_type - 1]);\r\n        this.node.addChild(g);\r\n        for(var i = 0; i < g.children.length; i ++) {\r\n            this.enemy_set.push(g.children[i]);\r\n        }\r\n        \r\n        g.x = (Math.random() - 0.5) * 200;\r\n        g.y = (Math.random()) * 100 + 500;\r\n        this.scheduleOnce(this._gen_random_groups.bind(this),Math.random() * 3 + 2);\r\n    }\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}