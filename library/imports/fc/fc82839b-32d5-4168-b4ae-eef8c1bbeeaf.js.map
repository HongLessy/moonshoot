{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        sprite_frames : {\r\n            default: [],\r\n            type: cc.SpriteFrame,\r\n        },\r\n        \r\n        duration: 0.1, // 帧的时间间隔\r\n        loop: false, // 是否循环播放\r\n        play_onload: false, // 是否在组件加载的时候播放;\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // 判断一下在组件所挂在的节点上面有没有cc.Sprite组件；\r\n        var s_com = this.node.getComponent(cc.Sprite);\r\n        if (!s_com) { // 没有cc.Sprite组件，要显示图片一定要有cc.Sprite组件,所以我们添加一个cc.Sprite组件;\r\n            s_com = this.node.addComponent(cc.Sprite);\r\n        }\r\n        this.sprite = s_com; // 精灵组件\r\n        // end \r\n        this.is_playing = false; // 是否正在播放;\r\n        this.play_time = 0;\r\n        this.is_loop = false;\r\n        this.end_func = null;\r\n        \r\n        // 显示第0个frame;\r\n        if (this.play_onload) {\r\n             this.sprite.spriteFrame = this.sprite_frames[0];\r\n            if (!this.loop) {\r\n                this.play_once(null);    \r\n            }\r\n            else {\r\n                this.play_loop();\r\n            }\r\n        }\r\n    },\r\n    \r\n    // 实现播放一次,\r\n    play_once: function(end_func) {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = false;\r\n        this.end_func = end_func;\r\n    }, \r\n    // end \r\n    \r\n    // 实现循环播放\r\n    play_loop: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = true;\r\n    },\r\n    // end \r\n    \r\n    stop_anim: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = false;\r\n        this.is_loop = false;\r\n    }, \r\n    \r\n    start: function() {\r\n        \r\n    },\r\n    \r\n    // called every frame, uncomment this function to activate update callback\r\n    // 每一次刷新的时候需要调用的函数，dt距离上一次刷新过去的时间;\r\n    update: function (dt) {\r\n        if (this.is_playing === false) { // 没有启动播放，不做处理\r\n            return;\r\n        }\r\n        \r\n        \r\n        \r\n        this.play_time += dt; // 累积我们播放的时间;\r\n        \r\n       // 计算时间，应当播放第几帧，而不是随便的下一帧，\r\n       // 否则的话，同样的动画1, 60帧，你在30FPS的机器上你会播放2秒，\r\n       // 你在60FPS的机器上你会播放1秒，动画就不同步;\r\n       \r\n        var index = Math.floor(this.play_time / this.duration); // 向下取整数\r\n        // index\r\n        if (this.is_loop === false) { // 播放一次\r\n            if (index >= this.sprite_frames.length) { // 非循环播放结束\r\n                // 精灵显示的是最后一帧;\r\n                this.sprite.spriteFrame = this.sprite_frames[this.sprite_frames.length - 1];\r\n                // end \r\n                this.is_playing = false;\r\n                this.play_time = 0;\r\n                if (this.end_func) { // 调用回掉函数\r\n                    this.end_func();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                this.sprite.spriteFrame = this.sprite_frames[index];\r\n            }\r\n        }\r\n        else { // 循环播放;\r\n            \r\n            while (index >= this.sprite_frames.length) {\r\n                index -= this.sprite_frames.length;\r\n                this.play_time -= (this.duration * this.sprite_frames.length);\r\n            }\r\n            \r\n            //  在合法的范围之内\r\n            this.sprite.spriteFrame = this.sprite_frames[index];\r\n            // end \r\n        }\r\n    },\r\n});\r\n"
  ]
}